// Code generated by protoc-gen-gogo.
// source: api.proto
// DO NOT EDIT!

/*
	Package apiv2 is a generated protocol buffer package.

	It is generated from these files:
		api.proto

	It has these top-level messages:
		Empty
		LabelMatcher
		TSDBAdminDeleteRequest
		TSDBAdminDeleteResponse
		TSDBAdminSnapshotRequest
		TSDBAdminSnapshotResponse
*/
package apiv2

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import _ "google.golang.org/genproto/googleapis/api/annotations"

import time "time"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type LabelMatcher_Type int32

const (
	LabelMatcher_EQ  LabelMatcher_Type = 0
	LabelMatcher_NEQ LabelMatcher_Type = 1
	LabelMatcher_RE  LabelMatcher_Type = 2
	LabelMatcher_NRE LabelMatcher_Type = 3
)

var LabelMatcher_Type_name = map[int32]string{
	0: "EQ",
	1: "NEQ",
	2: "RE",
	3: "NRE",
}
var LabelMatcher_Type_value = map[string]int32{
	"EQ":  0,
	"NEQ": 1,
	"RE":  2,
	"NRE": 3,
}

func (x LabelMatcher_Type) String() string {
	return proto.EnumName(LabelMatcher_Type_name, int32(x))
}
func (LabelMatcher_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorApi, []int{1, 0} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{0} }

// Matcher specifies a rule, which can match or set of labels or not.
type LabelMatcher struct {
	Type  LabelMatcher_Type `protobuf:"varint,1,opt,name=type,proto3,enum=apiv2.LabelMatcher_Type" json:"type,omitempty"`
	Name  string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Value string            `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *LabelMatcher) Reset()                    { *m = LabelMatcher{} }
func (m *LabelMatcher) String() string            { return proto.CompactTextString(m) }
func (*LabelMatcher) ProtoMessage()               {}
func (*LabelMatcher) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{1} }

type TSDBAdminDeleteRequest struct {
	StartsAt time.Time       `protobuf:"bytes,1,opt,name=starts_at,json=startsAt,stdtime" json:"starts_at"`
	EndsAt   time.Time       `protobuf:"bytes,2,opt,name=ends_at,json=endsAt,stdtime" json:"ends_at"`
	Matchers []*LabelMatcher `protobuf:"bytes,3,rep,name=matchers" json:"matchers,omitempty"`
}

func (m *TSDBAdminDeleteRequest) Reset()                    { *m = TSDBAdminDeleteRequest{} }
func (m *TSDBAdminDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*TSDBAdminDeleteRequest) ProtoMessage()               {}
func (*TSDBAdminDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{2} }

type TSDBAdminDeleteResponse struct {
}

func (m *TSDBAdminDeleteResponse) Reset()                    { *m = TSDBAdminDeleteResponse{} }
func (m *TSDBAdminDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*TSDBAdminDeleteResponse) ProtoMessage()               {}
func (*TSDBAdminDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{3} }

type TSDBAdminSnapshotRequest struct {
	Dir string `protobuf:"bytes,1,opt,name=dir,proto3" json:"dir,omitempty"`
}

func (m *TSDBAdminSnapshotRequest) Reset()                    { *m = TSDBAdminSnapshotRequest{} }
func (m *TSDBAdminSnapshotRequest) String() string            { return proto.CompactTextString(m) }
func (*TSDBAdminSnapshotRequest) ProtoMessage()               {}
func (*TSDBAdminSnapshotRequest) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{4} }

type TSDBAdminSnapshotResponse struct {
}

func (m *TSDBAdminSnapshotResponse) Reset()                    { *m = TSDBAdminSnapshotResponse{} }
func (m *TSDBAdminSnapshotResponse) String() string            { return proto.CompactTextString(m) }
func (*TSDBAdminSnapshotResponse) ProtoMessage()               {}
func (*TSDBAdminSnapshotResponse) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{5} }

func init() {
	proto.RegisterType((*Empty)(nil), "apiv2.Empty")
	proto.RegisterType((*LabelMatcher)(nil), "apiv2.LabelMatcher")
	proto.RegisterType((*TSDBAdminDeleteRequest)(nil), "apiv2.TSDBAdminDeleteRequest")
	proto.RegisterType((*TSDBAdminDeleteResponse)(nil), "apiv2.TSDBAdminDeleteResponse")
	proto.RegisterType((*TSDBAdminSnapshotRequest)(nil), "apiv2.TSDBAdminSnapshotRequest")
	proto.RegisterType((*TSDBAdminSnapshotResponse)(nil), "apiv2.TSDBAdminSnapshotResponse")
	proto.RegisterEnum("apiv2.LabelMatcher_Type", LabelMatcher_Type_name, LabelMatcher_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TSDBAdmin service

type TSDBAdminClient interface {
	Reload(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Snapshot(ctx context.Context, in *TSDBAdminSnapshotRequest, opts ...grpc.CallOption) (*TSDBAdminSnapshotResponse, error)
	DeleteSeries(ctx context.Context, in *TSDBAdminDeleteRequest, opts ...grpc.CallOption) (*TSDBAdminDeleteResponse, error)
}

type tSDBAdminClient struct {
	cc *grpc.ClientConn
}

func NewTSDBAdminClient(cc *grpc.ClientConn) TSDBAdminClient {
	return &tSDBAdminClient{cc}
}

func (c *tSDBAdminClient) Reload(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/apiv2.TSDBAdmin/Reload", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tSDBAdminClient) Snapshot(ctx context.Context, in *TSDBAdminSnapshotRequest, opts ...grpc.CallOption) (*TSDBAdminSnapshotResponse, error) {
	out := new(TSDBAdminSnapshotResponse)
	err := grpc.Invoke(ctx, "/apiv2.TSDBAdmin/Snapshot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tSDBAdminClient) DeleteSeries(ctx context.Context, in *TSDBAdminDeleteRequest, opts ...grpc.CallOption) (*TSDBAdminDeleteResponse, error) {
	out := new(TSDBAdminDeleteResponse)
	err := grpc.Invoke(ctx, "/apiv2.TSDBAdmin/DeleteSeries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TSDBAdmin service

type TSDBAdminServer interface {
	Reload(context.Context, *Empty) (*Empty, error)
	Snapshot(context.Context, *TSDBAdminSnapshotRequest) (*TSDBAdminSnapshotResponse, error)
	DeleteSeries(context.Context, *TSDBAdminDeleteRequest) (*TSDBAdminDeleteResponse, error)
}

func RegisterTSDBAdminServer(s *grpc.Server, srv TSDBAdminServer) {
	s.RegisterService(&_TSDBAdmin_serviceDesc, srv)
}

func _TSDBAdmin_Reload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSDBAdminServer).Reload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiv2.TSDBAdmin/Reload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSDBAdminServer).Reload(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TSDBAdmin_Snapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TSDBAdminSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSDBAdminServer).Snapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiv2.TSDBAdmin/Snapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSDBAdminServer).Snapshot(ctx, req.(*TSDBAdminSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TSDBAdmin_DeleteSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TSDBAdminDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSDBAdminServer).DeleteSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiv2.TSDBAdmin/DeleteSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSDBAdminServer).DeleteSeries(ctx, req.(*TSDBAdminDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TSDBAdmin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apiv2.TSDBAdmin",
	HandlerType: (*TSDBAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Reload",
			Handler:    _TSDBAdmin_Reload_Handler,
		},
		{
			MethodName: "Snapshot",
			Handler:    _TSDBAdmin_Snapshot_Handler,
		},
		{
			MethodName: "DeleteSeries",
			Handler:    _TSDBAdmin_DeleteSeries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *LabelMatcher) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelMatcher) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *TSDBAdminDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TSDBAdminDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApi(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.StartsAt)))
	n1, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartsAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintApi(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.EndsAt)))
	n2, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EndsAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.Matchers) > 0 {
		for _, msg := range m.Matchers {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TSDBAdminDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TSDBAdminDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *TSDBAdminSnapshotRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TSDBAdminSnapshotRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Dir) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Dir)))
		i += copy(dAtA[i:], m.Dir)
	}
	return i, nil
}

func (m *TSDBAdminSnapshotResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TSDBAdminSnapshotResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeFixed64Api(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Api(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Empty) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *LabelMatcher) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *TSDBAdminDeleteRequest) Size() (n int) {
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartsAt)
	n += 1 + l + sovApi(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EndsAt)
	n += 1 + l + sovApi(uint64(l))
	if len(m.Matchers) > 0 {
		for _, e := range m.Matchers {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *TSDBAdminDeleteResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *TSDBAdminSnapshotRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Dir)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *TSDBAdminSnapshotResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LabelMatcher) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelMatcher: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelMatcher: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (LabelMatcher_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TSDBAdminDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TSDBAdminDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TSDBAdminDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartsAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartsAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndsAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EndsAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Matchers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Matchers = append(m.Matchers, &LabelMatcher{})
			if err := m.Matchers[len(m.Matchers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TSDBAdminDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TSDBAdminDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TSDBAdminDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TSDBAdminSnapshotRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TSDBAdminSnapshotRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TSDBAdminSnapshotRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dir = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TSDBAdminSnapshotResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TSDBAdminSnapshotResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TSDBAdminSnapshotResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("api.proto", fileDescriptorApi) }

var fileDescriptorApi = []byte{
	// 479 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x51, 0xcf, 0x8b, 0xd3, 0x40,
	0x14, 0xee, 0x24, 0x6d, 0xd3, 0xbc, 0x16, 0x8d, 0xe3, 0xa2, 0xd9, 0xa8, 0x69, 0xc9, 0xa9, 0xc8,
	0x92, 0x40, 0xc4, 0xa3, 0x87, 0x96, 0xcd, 0x4d, 0x85, 0x4d, 0x7b, 0x56, 0xa7, 0x76, 0xec, 0x06,
	0x92, 0xcc, 0x98, 0x99, 0x2e, 0xf4, 0x2a, 0xfe, 0x01, 0x0b, 0xfe, 0x53, 0x05, 0x2f, 0x82, 0x77,
	0x7f, 0x14, 0xff, 0x10, 0xc9, 0x24, 0x29, 0xae, 0xb6, 0x07, 0x6f, 0x6f, 0xbe, 0xf7, 0xbd, 0x6f,
	0xde, 0xf7, 0x3d, 0x30, 0x09, 0x4f, 0x7c, 0x5e, 0x30, 0xc9, 0x70, 0x87, 0xf0, 0xe4, 0x2a, 0x74,
	0x86, 0x2b, 0xc6, 0x56, 0x29, 0x0d, 0x14, 0xb8, 0x58, 0xbf, 0x0b, 0x64, 0x92, 0x51, 0x21, 0x49,
	0xc6, 0x2b, 0x9e, 0xf3, 0xb0, 0x26, 0x10, 0x9e, 0x04, 0x24, 0xcf, 0x99, 0x24, 0x32, 0x61, 0xb9,
	0xa8, 0xbb, 0x27, 0x2b, 0xb6, 0x62, 0xaa, 0x0c, 0xca, 0xaa, 0x42, 0x3d, 0x03, 0x3a, 0x51, 0xc6,
	0xe5, 0xc6, 0xbb, 0x46, 0x30, 0x78, 0x4e, 0x16, 0x34, 0x7d, 0x41, 0xe4, 0xdb, 0x4b, 0x5a, 0xe0,
	0x33, 0x68, 0xcb, 0x0d, 0xa7, 0x36, 0x1a, 0xa1, 0xf1, 0xad, 0xd0, 0xf6, 0xd5, 0x12, 0xfe, 0x9f,
	0x14, 0x7f, 0xbe, 0xe1, 0x34, 0x56, 0x2c, 0x8c, 0xa1, 0x9d, 0x93, 0x8c, 0xda, 0xda, 0x08, 0x8d,
	0xcd, 0x58, 0xd5, 0xf8, 0x04, 0x3a, 0x57, 0x24, 0x5d, 0x53, 0x5b, 0x57, 0x60, 0xf5, 0xf0, 0xc6,
	0xd0, 0x2e, 0xe7, 0x70, 0x17, 0xb4, 0xe8, 0xc2, 0x6a, 0x61, 0x03, 0xf4, 0x97, 0xd1, 0x85, 0x85,
	0x4a, 0x20, 0x8e, 0x2c, 0x4d, 0x01, 0x71, 0x64, 0xe9, 0xde, 0x67, 0x04, 0xf7, 0xe6, 0xb3, 0xf3,
	0xe9, 0x64, 0x99, 0x25, 0xf9, 0x39, 0x4d, 0xa9, 0xa4, 0x31, 0x7d, 0xbf, 0xa6, 0x42, 0xe2, 0x09,
	0x98, 0x42, 0x92, 0x42, 0x8a, 0xd7, 0x44, 0xaa, 0x0d, 0xfb, 0xa1, 0xe3, 0x57, 0xf6, 0xfd, 0x26,
	0x1f, 0x7f, 0xde, 0xe4, 0x33, 0xed, 0x6d, 0xbf, 0x0d, 0x5b, 0xd7, 0xdf, 0x87, 0x28, 0xee, 0x55,
	0x63, 0x13, 0x89, 0x9f, 0x81, 0x41, 0xf3, 0xa5, 0x12, 0xd0, 0xfe, 0x43, 0xa0, 0x5b, 0x0e, 0x4d,
	0x24, 0x0e, 0xa0, 0x97, 0x55, 0x31, 0x08, 0x5b, 0x1f, 0xe9, 0xe3, 0x7e, 0x78, 0xf7, 0x40, 0x44,
	0xf1, 0x9e, 0xe4, 0x9d, 0xc2, 0xfd, 0x7f, 0xcc, 0x08, 0xce, 0x72, 0x41, 0xbd, 0x33, 0xb0, 0xf7,
	0xad, 0x59, 0x4e, 0xb8, 0xb8, 0x64, 0xb2, 0x71, 0x6a, 0x81, 0xbe, 0x4c, 0x0a, 0xe5, 0xd1, 0x8c,
	0xcb, 0xd2, 0x7b, 0x00, 0xa7, 0x07, 0xd8, 0x95, 0x54, 0xf8, 0x51, 0x03, 0x73, 0xdf, 0xc5, 0x4f,
	0xa1, 0x1b, 0xd3, 0x94, 0x91, 0x25, 0x1e, 0xd4, 0xcb, 0xa9, 0x63, 0x3b, 0x37, 0x5e, 0xde, 0xed,
	0x0f, 0x5f, 0x7f, 0x7d, 0xd2, 0x4c, 0x6c, 0x04, 0x45, 0x45, 0x7e, 0x03, 0xbd, 0x46, 0x18, 0x0f,
	0x6b, 0xea, 0xb1, 0x05, 0x9d, 0xd1, 0x71, 0x42, 0x6d, 0xef, 0x8e, 0xd2, 0xef, 0x63, 0x33, 0x10,
	0x8d, 0xea, 0x2b, 0x18, 0x54, 0x19, 0xcc, 0x68, 0x91, 0x50, 0x81, 0x1f, 0xfd, 0x2d, 0x72, 0xe3,
	0xdc, 0x8e, 0x7b, 0xac, 0x5d, 0xff, 0x50, 0x3b, 0x78, 0x6c, 0x04, 0x42, 0xe9, 0x4d, 0xad, 0xed,
	0x4f, 0xb7, 0xb5, 0xdd, 0xb9, 0xe8, 0xcb, 0xce, 0x45, 0x3f, 0x76, 0x2e, 0x5a, 0x74, 0xd5, 0x55,
	0x9f, 0xfc, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xa6, 0xd1, 0x4a, 0x41, 0x58, 0x03, 0x00, 0x00,
}
